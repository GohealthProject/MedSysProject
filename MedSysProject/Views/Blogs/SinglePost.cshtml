@model List<MedSysProject.Models.Blog>

@{
    Layout = "~/Views/Shared/_Layout_Blogs.cshtml";
}


<main id="main">
    @{
                    <section class="single-post-content">
                        <div class="container">
                            <div class="row">
                                <div class="col-md-9 post-content" @* data-aos="fade-up" *@>

                                    <!-- ======= Single Post Content ======= -->
                                    <div class="single-post">
                                        <div class="post-meta"><span class="date"></span> <span class="mx-1">&bullet;</span> <span>@Model[0].CreatedAt</span></div>
                                        <h1 class="mb-5">@Model[0].Title</h1>
                                        @{
                                if (Model[0].BlogImage != null)
                                {
                                                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model[0].BlogImage)"
                                                                 alt=""
                                                                 class="img-fluid" />
                                }
                                        }
                                        @Html.Raw(Model[0].Content)
                                    </div><!-- End Single Post Content -->
                                    <!-- ======= Comments ======= -->
                                    <!--所有的留言裝在一個div class="Comments"中，跟single-post同一個層級-->

                                    <div class="Comments" id="putIn">
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <!-- ======= 側面欄位丟這 ======= -->
                                    <div class="aside-block">

                                        <ul class="nav nav-pills custom-tab-nav mb-4" id="pills-tab" role="tablist">
                                            <li class="nav-item" role="presentation">
                                                <button class="nav-link active" id="pills-popular-tab" data-bs-toggle="pill" data-bs-target="#pills-popular" type="button" role="tab" aria-controls="pills-popular" aria-selected="true">Popular</button>
                                            </li>
                                            <li class="nav-item" role="presentation">
                                                <button class="nav-link" id="pills-latest-tab" data-bs-toggle="pill" data-bs-target="#pills-latest" type="button" role="tab" aria-controls="pills-latest" aria-selected="false">Latest</button>
                                            </li>
                                        </ul>

                                        <div class="tab-content" id="pills-tabContent">
                                            <div class="tab-pane fade show active" id="pills-popular" role="tabpanel" aria-labelledby="pills-popular-tab">
                                              
                                            </div>
                                            <div class="tab-pane fade show active" id="pills-latest" role="tabpanel" aria-labelledby="pills-popular-tab">
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
    }
</main><!-- End #main -->
@section Scripts {
    <script>
        //console.log("我是singlePost");
        //為了不要跑版，使用者輸入的圖片會自動被包上figure以限制版面
        var postContentElements = document.getElementsByClassName('single-post');
        for (var i = 0; i < postContentElements.length; i++) {
            var images = postContentElements[i].getElementsByTagName('img');
            for (var j = 0; j < images.length; j++) {
                var image = images[j];
                var figure = document.createElement('figure');
                image.parentNode.insertBefore(figure, image);
                figure.appendChild(image);//有待研究，javascripts真的太不熟了
            }
        }
        document.addEventListener("keydown", key);
        let input = document.querySelector("#comment-message");
        function key(event) {
            if (event.key == "Enter") {

            }
        }

        //!async await必須要在一起
        document.addEventListener('DOMContentLoaded', async () => {
            await loadPrimeComments();
            await processReplies();
            toggleLinkEvent();
            initButtons();
            await loadSideLatest();
        });

        //定義方法
        function initButtons() {
            let replyButtons = document.querySelectorAll('.replyBtn');//回覆按鈕
            console.log(replyButtons);
            replyButtons.forEach(function (rplyBtn) {
                rplyBtn.addEventListener('click', function (event) {
                    event.preventDefault();
                    console.log('Hi');//測試用，能操作回覆按鈕
                    const comment = rplyBtn.parentNode.parentNode;
                    console.log(comment);//測試用，能抓到按鈕對應留言區塊
                    const replyFormWrap = comment.querySelector('.js-reply-form-wrap');
                    replyFormWrap.classList.add("active");

                });
            });
            let closeButtons = document.querySelectorAll('.js-end-reply');
            console.log(closeButtons);//測試用，能抓到關閉按鈕
            closeButtons.forEach(closeBtn => {
                closeBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const replyFormWrap = closeBtn.closest('.js-reply-form-wrap');
                    replyFormWrap.classList.remove('active');
                });
            });
        }

        let blogId = @Model[0].BlogId;//可以直接塞razor?
        async function loadPrimeComments() {
            const response = await fetch(`@Url.Content("~/Blogs/ShowComments")?BlogId=${blogId}`);
            const data = await response.text();
            let putIn = document.querySelector('.post-content');
            //console.log(putIn);
            putIn.innerHTML += data;
        }
        async function processReplies() {
            let mainComment = document.querySelectorAll('.mainComment');
            //console.log(`主留言數量${mainComment.length}則`);
            for (const comment of mainComment) {
                await processReply(comment);
            }
        }


        /*在 JavaScript 中，函数的参数类型不是像一些静态类型语言（如 Java 或 C#）那样进行声明和显式定义的。
        JavaScript 是一种动态类型的语言，函数参数的类型通常是在运行时根据传递的实际参数值确定的。 */
        async function processReply(comment) {
            let commentId = comment.getAttribute('data-comment-id');
            const subResponse = await fetch(`@Url.Content("~/Blogs/ShowReplies")?mainCommentId=${commentId}`);
            const subData = await subResponse.text();
            let subPutIn = comment.querySelector('.subPutIn');
            subPutIn.innerHTML += subData;

            //如何取得?<h6 class="comment-replies-title mb-4 text-muted text-uppercase" data-reply-count="@Model.Count()">@Model.Count() 則回覆</h6>
            let replyCountElement = subPutIn.querySelector('.comment-replies-title');
            if (replyCountElement) {
                let replyCount = replyCountElement.getAttribute('data-reply-count');
                //console.log(`次要留言數目為:${replyCount}`);
                //console.log(typeof replyCount);
                if (parseInt(replyCount) === 0) {
                    ///parseInt會自動將string轉型
                    subPutIn.style.display = 'none';
                }
            }
        }

        //載入側面欄位
        //瀏覽次數最多
        async function loadSidePopular() {
            const response = await fetch(`https://localhost:7078/api/Blogs/`);
        }
        //最新
        async function loadSideLatest() {
            const response = await fetch(`https://localhost:7078/api/Blogs/latest6`);
            const data = await response.json();
            console.log(data);
            // const latestContainer = document.querySelector('#pills-latest');
            // const latest6 = data.map(blog => { 
            //     const { BlogId, Title, Author, ArticleClass, CreatedAt } = blog;
            //     return ` <div class="post-entry-1 border-bottom">
            //             <div class="post-meta">
            //                 <span class="date">${ArticleClass}</span>
            //                 <span class="mx-1">&bullet;</span>
            //                 <span>${CreatedAt}</span>
            //             </div>
            //                     <h2 class="mb-2"><a href="Url.Content("~/Blogs/SinglePost")?SingleBlogID=${BlogId} ">${Title}</a></h2>
            //             <span class="author mb-3 d-block">${Author}</span>
            //         </div>
                
            //     `
            // })
            latestContainer.innerHTML = latest6.join('');


        }

        //回覆區塊的展開收合
        function toggleLinkEvent() {
            var toggleLinks = document.querySelectorAll('.toggleLink');
            //console.log(toggleLinks);

            toggleLinks.forEach(function (link) {
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    var icon = link.querySelector('.bi');
                    var parentDiv = icon.parentNode.parentNode;
                    var repliesSection = parentDiv.parentNode;
                    var replySections = repliesSection.querySelectorAll('.reply');
                    console.log(replySections);
                    replySections.forEach(function (reply) {
                        reply.style.display = 'none!';
                        reply.setAttribute('style', 'display: none !important');

                    });
                    if (icon.classList.contains('bi-chevron-down')) {
                        icon.classList.remove('bi-chevron-down');
                        icon.classList.add('bi-chevron-up');
                        replySections.forEach(function (reply) {
                            reply.style.display = 'block';
                            reply.setAttribute('style', 'display: block !important');
                        });

                    } else {
                        icon.classList.remove('bi-chevron-up');
                        icon.classList.add('bi-chevron-down');
                        replySections.forEach(function (reply) {
                            reply.style.display = 'none!important';
                            reply.setAttribute('style', 'display: none !important');
                        });
                    }


                });
            });
        }



        //沒屁用
        function scrollToElement(elementId) {
            let selector = '#c' + elementId;
            console.log(selector);
            var element = document.querySelector(selector);
            if (element) {
                element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }


    </script>
}
