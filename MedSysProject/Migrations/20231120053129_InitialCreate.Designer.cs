// <auto-generated />
using System;
using MedSysProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedSysProject.Migrations
{
    [DbContext(typeof(MedSysContext))]
    [Migration("20231120053129_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedSysProject.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("ArticleClassId")
                        .HasColumnType("int")
                        .HasColumnName("ArticleClassID");

                    b.Property<byte[]>("BlogImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("BlogId")
                        .HasName("PK_Blog");

                    b.HasIndex("ArticleClassId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MedSysProject.Models.BlogCategory", b =>
                {
                    b.Property<int>("BlogClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogClassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogClassId"));

                    b.Property<string>("BlogCategory1")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("BlogCategory");

                    b.HasKey("BlogClassId")
                        .HasName("PK_ArticleCat");

                    b.ToTable("BlogCategory", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.BlogManagement", b =>
                {
                    b.Property<int>("BlogPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogPermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPermissionId"));

                    b.Property<string>("PermissionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BlogPermissionId");

                    b.ToTable("BlogManagement", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentCommentID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFAA7AC8255B");

                    b.HasIndex("BlogId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MedSysProject.Models.Corporation", b =>
                {
                    b.Property<int>("TaxId")
                        .HasColumnType("int")
                        .HasColumnName("taxID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<int>("Contactnumber")
                        .HasColumnType("int")
                        .HasColumnName("contactnumber");

                    b.Property<string>("Corporation1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("corporation");

                    b.Property<double?>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<string>("Middleman")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("middleman");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.HasKey("TaxId");

                    b.ToTable("Corporation", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime?>("EmployeeBirthDate")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeClassId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeClassID");

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeePassWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmployeePhoneNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("EmployeePhoto")
                        .HasColumnType("image");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employee");

                    b.HasIndex("EmployeeClassId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MedSysProject.Models.EmployeeClass", b =>
                {
                    b.Property<int>("EmployeeClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeClassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeClassId"));

                    b.Property<int>("BlogPermissionId")
                        .HasColumnType("int")
                        .HasColumnName("BlogPermissionID");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeClassId");

                    b.HasIndex("BlogPermissionId");

                    b.ToTable("EmployeeClass", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.HealthReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int?>("Paymentstatus")
                        .HasColumnType("int");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("PlanID");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("date");

                    b.Property<int?>("ReserveId")
                        .HasColumnType("int")
                        .HasColumnName("ReserveID");

                    b.HasKey("ReportId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ReserveId");

                    b.ToTable("HealthReport", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int?>("Fmax")
                        .HasColumnType("int");

                    b.Property<int?>("Fmin")
                        .HasColumnType("int");

                    b.Property<string>("ItemComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("itemComment");

                    b.Property<string>("ItemName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("itemName");

                    b.Property<int?>("ItemPrice")
                        .HasColumnType("int")
                        .HasColumnName("itemPrice");

                    b.Property<string>("ItemRange")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("itemRange");

                    b.Property<int?>("ItemRangeMax")
                        .HasColumnType("int")
                        .HasColumnName("itemRangeMax");

                    b.Property<int?>("ItemRangeMin")
                        .HasColumnType("int")
                        .HasColumnName("itemRangeMin");

                    b.Property<string>("ItemUnit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("itemUnit");

                    b.Property<int?>("Mmax")
                        .HasColumnType("int");

                    b.Property<int?>("Mmin")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectID");

                    b.HasKey("ItemId")
                        .HasName("PK_Item$");

                    b.HasIndex("ProjectId");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<string>("MemberAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberAccount");

                    b.Property<string>("MemberAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberAddress");

                    b.Property<DateTime?>("MemberBirthdate")
                        .HasColumnType("date")
                        .HasColumnName("memberBirthdate");

                    b.Property<string>("MemberContactNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("memberContactNumber")
                        .IsFixedLength();

                    b.Property<string>("MemberEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberEmail");

                    b.Property<string>("MemberGender")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("memberGender")
                        .IsFixedLength();

                    b.Property<string>("MemberName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("memberName")
                        .IsFixedLength();

                    b.Property<string>("MemberNickname")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("memberNickname")
                        .IsFixedLength();

                    b.Property<string>("MemberPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberPassword");

                    b.Property<string>("MemberPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("memberPhone")
                        .IsFixedLength();

                    b.Property<int?>("TaxId")
                        .HasColumnType("int")
                        .HasColumnName("taxID");

                    b.HasKey("MemberId")
                        .HasName("PK_Member");

                    b.HasIndex("TaxId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MedSysProject.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date")
                        .HasColumnName("deliveryDate");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("orderDate");

                    b.Property<int?>("PayId")
                        .HasColumnType("int")
                        .HasColumnName("payID");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("date")
                        .HasColumnName("shipDate");

                    b.Property<int?>("ShipId")
                        .HasColumnType("int")
                        .HasColumnName("shipID");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("stateID");

                    b.HasKey("OrderId")
                        .HasName("PK_Order_1");

                    b.HasIndex("MemberId");

                    b.HasIndex("PayId");

                    b.HasIndex("ShipId");

                    b.HasIndex("StateId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("orderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("productID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unitPrice");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MedSysProject.Models.OrderPay", b =>
                {
                    b.Property<int>("PayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayId"));

                    b.Property<string>("PayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PayId");

                    b.ToTable("OrderPay", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.OrderShip", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shipID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipId"));

                    b.Property<string>("ShipName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("shipName");

                    b.HasKey("ShipId");

                    b.ToTable("OrderShip", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.OrderState", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("stateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("StateDetailed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stateDetailed");

                    b.Property<string>("StateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stateName");

                    b.HasKey("StateId");

                    b.ToTable("OrderState", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("planId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("PlanDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("planDescription");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("planName");

                    b.HasKey("PlanId");

                    b.ToTable("Plan", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.PlanRef", b =>
                {
                    b.Property<int>("PlanbridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("planbridgeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanbridgeId"));

                    b.Property<int>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("planID");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectID");

                    b.HasKey("PlanbridgeId")
                        .HasName("PK_Planbrigee");

                    b.HasIndex("PlanId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PlanRef", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<int?>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MedSysProject.Models.ProductsCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoriesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriesId"));

                    b.Property<string>("CategoriesName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoriesId");

                    b.ToTable("ProductsCategories");
                });

            modelBuilder.Entity("MedSysProject.Models.ProductsClassification", b =>
                {
                    b.Property<int>("ProductsClassification1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductsClassification");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductsClassification1"));

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int")
                        .HasColumnName("CategoriesID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductsClassification1");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsClassification", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("projectID");

                    b.Property<string>("ProjectContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("projectContent");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("ProjectPrice")
                        .HasColumnType("float")
                        .HasColumnName("projectPrice");

                    b.HasKey("ProjectId")
                        .HasName("PK_subproject");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.ReportDetail", b =>
                {
                    b.Property<int>("ReportDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReportDetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportDetailId"));

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("result");

                    b.HasKey("ReportDetailId")
                        .HasName("PK_reportDetail$");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportDetail", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.ReportTest", b =>
                {
                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("ReportDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ReportDetailID");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("ReportID");

                    b.Property<string>("Result")
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportTest", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Reserve", b =>
                {
                    b.Property<int>("ReserveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReserveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReserveId"));

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberID");

                    b.Property<int?>("PlanId")
                        .HasColumnType("int")
                        .HasColumnName("planID");

                    b.Property<DateTime?>("ReserveDate")
                        .HasColumnType("date");

                    b.Property<string>("ReserveState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ReserveId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlanId");

                    b.ToTable("Reserve", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.ReservedSub", b =>
                {
                    b.Property<int>("SubreservedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subreservedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubreservedId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemID");

                    b.Property<int>("ReservedId")
                        .HasColumnType("int")
                        .HasColumnName("reservedID");

                    b.HasKey("SubreservedId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReservedId");

                    b.ToTable("ReservedSub", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.SubProjectBridge", b =>
                {
                    b.Property<int>("SubProjectBridgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubProjectBridgeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubProjectBridgeId"));

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID");

                    b.HasKey("SubProjectBridgeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProjectId");

                    b.ToTable("subProjectBridges", (string)null);
                });

            modelBuilder.Entity("MedSysProject.Models.Blog", b =>
                {
                    b.HasOne("MedSysProject.Models.BlogCategory", "ArticleClass")
                        .WithMany("Blogs")
                        .HasForeignKey("ArticleClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_ArticleCat");

                    b.HasOne("MedSysProject.Models.Employee", "Employee")
                        .WithMany("Blogs")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Blog_Employee");

                    b.Navigation("ArticleClass");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MedSysProject.Models.Comment", b =>
                {
                    b.HasOne("MedSysProject.Models.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__BlogID__4924D839");

                    b.HasOne("MedSysProject.Models.Employee", "Employee")
                        .WithMany("Comments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Comments__Employ__4B0D20AB");

                    b.HasOne("MedSysProject.Models.Member", "Member")
                        .WithMany("Comments")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Comments_Members1");

                    b.HasOne("MedSysProject.Models.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__Comments__Parent__4C0144E4");

                    b.Navigation("Blog");

                    b.Navigation("Employee");

                    b.Navigation("Member");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("MedSysProject.Models.Employee", b =>
                {
                    b.HasOne("MedSysProject.Models.EmployeeClass", "EmployeeClass")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_EmployeeClass");

                    b.Navigation("EmployeeClass");
                });

            modelBuilder.Entity("MedSysProject.Models.EmployeeClass", b =>
                {
                    b.HasOne("MedSysProject.Models.BlogManagement", "BlogPermission")
                        .WithMany("EmployeeClasses")
                        .HasForeignKey("BlogPermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeClass_BlogManagement");

                    b.Navigation("BlogPermission");
                });

            modelBuilder.Entity("MedSysProject.Models.HealthReport", b =>
                {
                    b.HasOne("MedSysProject.Models.Member", "Member")
                        .WithMany("HealthReports")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_HealthReport_Member");

                    b.HasOne("MedSysProject.Models.Plan", "Plan")
                        .WithMany("HealthReports")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_HealthReport_Plan");

                    b.HasOne("MedSysProject.Models.Reserve", "Reserve")
                        .WithMany("HealthReports")
                        .HasForeignKey("ReserveId")
                        .HasConstraintName("FK_HealthReport_Reserve");

                    b.Navigation("Member");

                    b.Navigation("Plan");

                    b.Navigation("Reserve");
                });

            modelBuilder.Entity("MedSysProject.Models.Item", b =>
                {
                    b.HasOne("MedSysProject.Models.Project", "Project")
                        .WithMany("Items")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Item$_subproject");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MedSysProject.Models.Member", b =>
                {
                    b.HasOne("MedSysProject.Models.Corporation", "Tax")
                        .WithMany("Members")
                        .HasForeignKey("TaxId")
                        .HasConstraintName("FK_Member_Corporation");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("MedSysProject.Models.Order", b =>
                {
                    b.HasOne("MedSysProject.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Order_Member");

                    b.HasOne("MedSysProject.Models.OrderPay", "Pay")
                        .WithMany("Orders")
                        .HasForeignKey("PayId")
                        .HasConstraintName("FK_Order_OrderPay");

                    b.HasOne("MedSysProject.Models.OrderShip", "Ship")
                        .WithMany("Orders")
                        .HasForeignKey("ShipId")
                        .HasConstraintName("FK_Order_OrderShip");

                    b.HasOne("MedSysProject.Models.OrderState", "State")
                        .WithMany("Orders")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Order_OrderState");

                    b.Navigation("Member");

                    b.Navigation("Pay");

                    b.Navigation("Ship");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MedSysProject.Models.OrderDetail", b =>
                {
                    b.HasOne("MedSysProject.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Order");

                    b.HasOne("MedSysProject.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetails_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MedSysProject.Models.PlanRef", b =>
                {
                    b.HasOne("MedSysProject.Models.Plan", "Plan")
                        .WithMany("PlanRefs")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK_PlanRef_Plan");

                    b.HasOne("MedSysProject.Models.Project", "Project")
                        .WithMany("PlanRefs")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Planbrigee_subproject");

                    b.Navigation("Plan");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MedSysProject.Models.ProductsClassification", b =>
                {
                    b.HasOne("MedSysProject.Models.ProductsCategory", "Categories")
                        .WithMany("ProductsClassifications")
                        .HasForeignKey("CategoriesId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsClassification_ProductsCategories");

                    b.HasOne("MedSysProject.Models.Product", "Product")
                        .WithMany("ProductsClassifications")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductsClassification_Products");

                    b.Navigation("Categories");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MedSysProject.Models.ReportDetail", b =>
                {
                    b.HasOne("MedSysProject.Models.Item", "Item")
                        .WithMany("ReportDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ReportDetail_Item");

                    b.HasOne("MedSysProject.Models.HealthReport", "Report")
                        .WithMany("ReportDetails")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("FK_ReportDetail_HealthReport");

                    b.Navigation("Item");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MedSysProject.Models.ReportTest", b =>
                {
                    b.HasOne("MedSysProject.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ReportTest_Item");

                    b.HasOne("MedSysProject.Models.HealthReport", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportTest_HealthReport");

                    b.Navigation("Item");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("MedSysProject.Models.Reserve", b =>
                {
                    b.HasOne("MedSysProject.Models.Member", "Member")
                        .WithMany("Reserves")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Reserve_Members");

                    b.HasOne("MedSysProject.Models.Plan", "Plan")
                        .WithMany("Reserves")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_Reserve_Plan");

                    b.Navigation("Member");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("MedSysProject.Models.ReservedSub", b =>
                {
                    b.HasOne("MedSysProject.Models.Item", "Item")
                        .WithMany("ReservedSubs")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservedSub_Item$");

                    b.HasOne("MedSysProject.Models.Reserve", "Reserved")
                        .WithMany("ReservedSubs")
                        .HasForeignKey("ReservedId")
                        .IsRequired()
                        .HasConstraintName("FK_ReservedSub_Reserve");

                    b.Navigation("Item");

                    b.Navigation("Reserved");
                });

            modelBuilder.Entity("MedSysProject.Models.SubProjectBridge", b =>
                {
                    b.HasOne("MedSysProject.Models.Item", "Item")
                        .WithMany("SubProjectBridges")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_subProjectBridges_Item$");

                    b.HasOne("MedSysProject.Models.Project", "Project")
                        .WithMany("SubProjectBridges")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_subProjectBridges_subproject");

                    b.Navigation("Item");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MedSysProject.Models.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MedSysProject.Models.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("MedSysProject.Models.BlogManagement", b =>
                {
                    b.Navigation("EmployeeClasses");
                });

            modelBuilder.Entity("MedSysProject.Models.Comment", b =>
                {
                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("MedSysProject.Models.Corporation", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("MedSysProject.Models.Employee", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MedSysProject.Models.EmployeeClass", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MedSysProject.Models.HealthReport", b =>
                {
                    b.Navigation("ReportDetails");
                });

            modelBuilder.Entity("MedSysProject.Models.Item", b =>
                {
                    b.Navigation("ReportDetails");

                    b.Navigation("ReservedSubs");

                    b.Navigation("SubProjectBridges");
                });

            modelBuilder.Entity("MedSysProject.Models.Member", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("HealthReports");

                    b.Navigation("Orders");

                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("MedSysProject.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MedSysProject.Models.OrderPay", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MedSysProject.Models.OrderShip", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MedSysProject.Models.OrderState", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MedSysProject.Models.Plan", b =>
                {
                    b.Navigation("HealthReports");

                    b.Navigation("PlanRefs");

                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("MedSysProject.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductsClassifications");
                });

            modelBuilder.Entity("MedSysProject.Models.ProductsCategory", b =>
                {
                    b.Navigation("ProductsClassifications");
                });

            modelBuilder.Entity("MedSysProject.Models.Project", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PlanRefs");

                    b.Navigation("SubProjectBridges");
                });

            modelBuilder.Entity("MedSysProject.Models.Reserve", b =>
                {
                    b.Navigation("HealthReports");

                    b.Navigation("ReservedSubs");
                });
#pragma warning restore 612, 618
        }
    }
}
